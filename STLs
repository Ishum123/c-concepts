//1  sorting algos -- comparators

struct Interval {
    int start, end;
};
 
// Compares two intervals
// according to staring times.
bool compareInterval(Interval i1, Interval i2)
{
    return (i1.start < i2.start);
}
 
int main()
{
    Interval arr[]
        = { { 6, 8 }, { 1, 9 }, { 2, 4 }, { 4, 7 } };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    // sort the intervals in increasing order of
    // start time
    sort(arr, arr + n, compareInterval);
 
    cout << "Intervals sorted by start time : \n";
    for (int i = 0; i < n; i++)
        cout << "[" << arr[i].start << "," << arr[i].end
             << "] ";
 
    return 0;
}


// vector<int> v(50); like this vector having 50 elements


//* working with vector and pairs...
vector< pair <int,int>> p;
   
   p.push_back(make_pair(1,2));
   p.push_back(make_pair(1,1));
   
   sort(p.begin(),p.end());
   
   for(int i=0;i<p.size();i++){
       cout<<p[i].first<<" "<<p[i].second<<endl;
   }
   
   
   strings:
   1) cin.ignore();
   while(t--){
   string s;
   getline(cin,s);
   cout<<s<<endl;
   }
 }
 
 2) s.push_back(s[i]);
 3) s[n-1]-'0';
 
 4)    size_t huhu = s2.find(s1);
        
    if (huhu != string::npos)
        cout << "Good"<<endl;
    else if( hihi!=string::npos)
    cout<< "Worst"<<endl;
