//1 removing duplicates

int remDups(int arr[], int n)
{
	int res = 1;

	for(int i = 1; i < n; i++)
	{
		if(arr[res - 1] != arr[i])
		{
			arr[res] = arr[i];
			res++;
		}
	}

	return res;
}

// 2 to move all zero at back:
   
   int count=0;
 for(int i=0;i<n;i++){
      if(a[i]!=0){
           swap(a[i], a[count]);
           count++;
       }
    }
    
    
//  3 to left shift by d

void leftRotate(int arr[], int d, int n)
{
	int temp[d];

	for(int i = 0; i  < d; i++)
	{
		temp[i] = arr[i];
	}

	for(int i = d; i  < n; i++)
	{
		arr[i - d] = arr[i];
	}

	for(int i = 0; i  < d; i++)
	{
		arr[n - d + i] = temp[i];
	}	
}

// 4 leaders (solved by myself)

  int lead=a[n-1];
    cout<<a[n-1]<<" ";
    for(int i=n-2;i>=0;i--){
        if(a[i]>lead){
        cout<<a[i]<<" ";
        lead=a[i];
        }
    }
    
    
